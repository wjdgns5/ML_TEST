# -*- coding: utf-8 -*-
"""ML_기말.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xzt99PuVkkltMzKB7CBvASDYpNtPexOe
"""

import numpy as np
import pandas as pd

data = pd.read_csv('drive/MyDrive/ML/Fish.csv')
perch_dataset = data[data.Species == 'Perch'] #농어

print(data);

perch_length = np.array([i for i in perch_dataset.Length2])
perch_weight = np.array([j for j in perch_dataset.Weight])

print(perch_length)
print(perch_weight)


import matplotlib.pyplot as plt
plt.scatter(perch_length, perch_weight)
plt.xlabel('length')
plt.ylabel('weight')
plt.show()


from sklearn.model_selection import train_test_split
train_input, test_input ,train_target, test_target = train_test_split(perch_length, perch_weight, random_state=42)

train_input = train_input.reshape(-1,1)
test_input = test_input.reshape(-1,1)

from sklearn.neighbors import KNeighborsRegressor

knr = KNeighborsRegressor()
knr.fit(train_input, train_target)
print("test 스코어 : " , knr.score(test_input, test_target))
print("훈련 스코어 : " ,knr.score(train_input, train_target))

knr.n_neighbors = 3
knr.fit(train_input, train_target)
print("test 스코어 : " , knr.score(test_input, test_target))
print("훈련 스코어 : " ,knr.score(train_input, train_target))
print(knr.predict([[50]]))

distances, indexes = knr.kneighbors([[50]])
print(distances, indexes)

import matplotlib.pyplot as plt
plt.scatter(train_input, train_target)
plt.scatter(train_input[indexes], train_target[indexes], marker='s')
plt.scatter(50, 1033, marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

print(knr.predict([[100]]))
distances, indexes = knr.kneighbors([[100]])

plt.scatter(train_input, train_target)
plt.scatter(train_input[indexes], train_target[indexes], marker='s')
plt.scatter(50, 1033, marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()


from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(train_input, train_target)
print(lr.predict([[50]]))

print(lr.coef_, lr.intercept_)
plt.scatter(train_input, train_target)
plt.plot([15, 50], [15*lr.coef_+lr.intercept_, 50*lr.coef_+lr.intercept_])
plt.xlabel('length')
plt.ylabel('weight')
plt.show()
print("test 스코어 : " , lr.score(test_input, test_target))
print("훈련 스코어 : " ,lr.score(train_input, train_target))